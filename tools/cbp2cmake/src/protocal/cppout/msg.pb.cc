// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#include "msg.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace CC_Msg {
PROTOBUF_CONSTEXPR CC_Msg::CC_Msg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.restparam_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.callingtype_)*/0} {}
struct CC_MsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CC_MsgDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CC_MsgDefaultTypeInternal() {}
  union {
    CC_Msg _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CC_MsgDefaultTypeInternal _CC_Msg_default_instance_;
}  // namespace CC_Msg
static ::_pb::Metadata file_level_metadata_msg_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_msg_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_msg_2eproto = nullptr;
const ::uint32_t TableStruct_msg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::CC_Msg::CC_Msg, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CC_Msg::CC_Msg, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CC_Msg::CC_Msg, _impl_.callingtype_),
    PROTOBUF_FIELD_OFFSET(::CC_Msg::CC_Msg, _impl_.restparam_),
    1,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::CC_Msg::CC_Msg)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::CC_Msg::_CC_Msg_default_instance_._instance,
};
const char descriptor_table_protodef_msg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\tmsg.proto\022\006CC_Msg\"\277\001\n\006CC_Msg\022.\n\013callin"
    "gType\030\001 \002(\0162\031.CC_Msg.CC_Msg.CC_MsgType\022\021"
    "\n\trestParam\030\002 \001(\014\"r\n\nCC_MsgType\022\010\n\004Init\020"
    "\000\022\013\n\007AddNode\020\001\022\013\n\007Analyze\020\002\022\013\n\007Connect\020\003"
    "\022\r\n\tConstruct\020\004\022\013\n\007Convert\020\005\022\013\n\007Extract\020"
    "\006\022\n\n\006Upload\020\007"
};
static ::absl::once_flag descriptor_table_msg_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_msg_2eproto = {
    false,
    false,
    213,
    descriptor_table_protodef_msg_2eproto,
    "msg.proto",
    &descriptor_table_msg_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_msg_2eproto::offsets,
    file_level_metadata_msg_2eproto,
    file_level_enum_descriptors_msg_2eproto,
    file_level_service_descriptors_msg_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_msg_2eproto_getter() {
  return &descriptor_table_msg_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_msg_2eproto(&descriptor_table_msg_2eproto);
namespace CC_Msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CC_Msg_CC_MsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[0];
}
bool CC_Msg_CC_MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr CC_Msg_CC_MsgType CC_Msg::Init;
constexpr CC_Msg_CC_MsgType CC_Msg::AddNode;
constexpr CC_Msg_CC_MsgType CC_Msg::Analyze;
constexpr CC_Msg_CC_MsgType CC_Msg::Connect;
constexpr CC_Msg_CC_MsgType CC_Msg::Construct;
constexpr CC_Msg_CC_MsgType CC_Msg::Convert;
constexpr CC_Msg_CC_MsgType CC_Msg::Extract;
constexpr CC_Msg_CC_MsgType CC_Msg::Upload;
constexpr CC_Msg_CC_MsgType CC_Msg::CC_MsgType_MIN;
constexpr CC_Msg_CC_MsgType CC_Msg::CC_MsgType_MAX;
constexpr int CC_Msg::CC_MsgType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class CC_Msg::_Internal {
 public:
  using HasBits = decltype(std::declval<CC_Msg>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CC_Msg, _impl_._has_bits_);
  static void set_has_callingtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_restparam(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

CC_Msg::CC_Msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CC_Msg.CC_Msg)
}
CC_Msg::CC_Msg(const CC_Msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CC_Msg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.restparam_){}
    , decltype(_impl_.callingtype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.restparam_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.restparam_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_restparam()) {
    _this->_impl_.restparam_.Set(from._internal_restparam(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.callingtype_ = from._impl_.callingtype_;
  // @@protoc_insertion_point(copy_constructor:CC_Msg.CC_Msg)
}

inline void CC_Msg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.restparam_){}
    , decltype(_impl_.callingtype_){0}
  };
  _impl_.restparam_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.restparam_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CC_Msg::~CC_Msg() {
  // @@protoc_insertion_point(destructor:CC_Msg.CC_Msg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CC_Msg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.restparam_.Destroy();
}

void CC_Msg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CC_Msg::Clear() {
// @@protoc_insertion_point(message_clear_start:CC_Msg.CC_Msg)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.restparam_.ClearNonDefaultToEmpty();
  }
  _impl_.callingtype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CC_Msg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {

#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .CC_Msg.CC_Msg.CC_MsgType callingType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CC_Msg::CC_Msg_CC_MsgType_IsValid(static_cast<int>(val)))) {
            _internal_set_callingtype(static_cast<::CC_Msg::CC_Msg_CC_MsgType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes restParam = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_restparam();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CC_Msg::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {

  // @@protoc_insertion_point(serialize_to_array_start:CC_Msg.CC_Msg)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .CC_Msg.CC_Msg.CC_MsgType callingType = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_callingtype(), target);
  }

  // optional bytes restParam = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_restparam(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CC_Msg.CC_Msg)
  return target;
}

::size_t CC_Msg::ByteSizeLong() const {

// @@protoc_insertion_point(message_byte_size_start:CC_Msg.CC_Msg)
  ::size_t total_size = 0;

  // required .CC_Msg.CC_Msg.CC_MsgType callingType = 1;
  if (_internal_has_callingtype()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_callingtype());
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes restParam = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_restparam());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CC_Msg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CC_Msg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CC_Msg::GetClassData() const { return &_class_data_; }


void CC_Msg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CC_Msg*>(&to_msg);
  auto& from = static_cast<const CC_Msg&>(from_msg);

  // @@protoc_insertion_point(class_specific_merge_from_start:CC_Msg.CC_Msg)
  GOOGLE_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_restparam(from._internal_restparam());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.callingtype_ = from._impl_.callingtype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CC_Msg::CopyFrom(const CC_Msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CC_Msg.CC_Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CC_Msg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CC_Msg::InternalSwap(CC_Msg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.restparam_, lhs_arena,
      &other->_impl_.restparam_, rhs_arena
  );
  swap(_impl_.callingtype_, other->_impl_.callingtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CC_Msg::GetMetadata() const {

  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace CC_Msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CC_Msg::CC_Msg*
Arena::CreateMaybeMessage< ::CC_Msg::CC_Msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CC_Msg::CC_Msg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
