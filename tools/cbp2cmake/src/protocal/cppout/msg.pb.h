// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 3021000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_msg_2eproto;
namespace CC_Msg {
class CC_Msg;
struct CC_MsgDefaultTypeInternal;
extern CC_MsgDefaultTypeInternal _CC_Msg_default_instance_;
}  // namespace CC_Msg
PROTOBUF_NAMESPACE_OPEN
template <>
::CC_Msg::CC_Msg* Arena::CreateMaybeMessage<::CC_Msg::CC_Msg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace CC_Msg {
enum CC_Msg_CC_MsgType : int {
  CC_Msg_CC_MsgType_Init = 0,
  CC_Msg_CC_MsgType_AddNode = 1,
  CC_Msg_CC_MsgType_Analyze = 2,
  CC_Msg_CC_MsgType_Connect = 3,
  CC_Msg_CC_MsgType_Construct = 4,
  CC_Msg_CC_MsgType_Convert = 5,
  CC_Msg_CC_MsgType_Extract = 6,
  CC_Msg_CC_MsgType_Upload = 7,
};

bool CC_Msg_CC_MsgType_IsValid(int value);
constexpr CC_Msg_CC_MsgType CC_Msg_CC_MsgType_CC_MsgType_MIN = static_cast<CC_Msg_CC_MsgType>(0);
constexpr CC_Msg_CC_MsgType CC_Msg_CC_MsgType_CC_MsgType_MAX = static_cast<CC_Msg_CC_MsgType>(7);
constexpr int CC_Msg_CC_MsgType_CC_MsgType_ARRAYSIZE = 7 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
CC_Msg_CC_MsgType_descriptor();
template <typename T>
const std::string& CC_Msg_CC_MsgType_Name(T value) {
  static_assert(std::is_same<T, CC_Msg_CC_MsgType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CC_MsgType_Name().");
  return CC_Msg_CC_MsgType_Name(static_cast<CC_Msg_CC_MsgType>(value));
}
template <>
inline const std::string& CC_Msg_CC_MsgType_Name(CC_Msg_CC_MsgType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<CC_Msg_CC_MsgType_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool CC_Msg_CC_MsgType_Parse(absl::string_view name, CC_Msg_CC_MsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CC_Msg_CC_MsgType>(
      CC_Msg_CC_MsgType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class CC_Msg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CC_Msg.CC_Msg) */ {
 public:
  inline CC_Msg() : CC_Msg(nullptr) {}
  ~CC_Msg() override;
  explicit PROTOBUF_CONSTEXPR CC_Msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CC_Msg(const CC_Msg& from);
  CC_Msg(CC_Msg&& from) noexcept
    : CC_Msg() {
    *this = ::std::move(from);
  }

  inline CC_Msg& operator=(const CC_Msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CC_Msg& operator=(CC_Msg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CC_Msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const CC_Msg* internal_default_instance() {
    return reinterpret_cast<const CC_Msg*>(
               &_CC_Msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CC_Msg& a, CC_Msg& b) {
    a.Swap(&b);
  }
  inline void Swap(CC_Msg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CC_Msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CC_Msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CC_Msg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CC_Msg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CC_Msg& from) {
    CC_Msg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CC_Msg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "CC_Msg.CC_Msg";
  }
  protected:
  explicit CC_Msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using CC_MsgType = CC_Msg_CC_MsgType;
  static constexpr CC_MsgType Init = CC_Msg_CC_MsgType_Init;
  static constexpr CC_MsgType AddNode = CC_Msg_CC_MsgType_AddNode;
  static constexpr CC_MsgType Analyze = CC_Msg_CC_MsgType_Analyze;
  static constexpr CC_MsgType Connect = CC_Msg_CC_MsgType_Connect;
  static constexpr CC_MsgType Construct = CC_Msg_CC_MsgType_Construct;
  static constexpr CC_MsgType Convert = CC_Msg_CC_MsgType_Convert;
  static constexpr CC_MsgType Extract = CC_Msg_CC_MsgType_Extract;
  static constexpr CC_MsgType Upload = CC_Msg_CC_MsgType_Upload;
  static inline bool CC_MsgType_IsValid(int value) {
    return CC_Msg_CC_MsgType_IsValid(value);
  }
  static constexpr CC_MsgType CC_MsgType_MIN = CC_Msg_CC_MsgType_CC_MsgType_MIN;
  static constexpr CC_MsgType CC_MsgType_MAX = CC_Msg_CC_MsgType_CC_MsgType_MAX;
  static constexpr int CC_MsgType_ARRAYSIZE = CC_Msg_CC_MsgType_CC_MsgType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CC_MsgType_descriptor() {
    return CC_Msg_CC_MsgType_descriptor();
  }
  template <typename T>
  static inline const std::string& CC_MsgType_Name(T value) {
    return CC_Msg_CC_MsgType_Name(value);
  }
  static inline bool CC_MsgType_Parse(absl::string_view name, CC_MsgType* value) {
    return CC_Msg_CC_MsgType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRestParamFieldNumber = 2,
    kCallingTypeFieldNumber = 1,
  };
  // optional bytes restParam = 2;
  bool has_restparam() const;
  private:
  bool _internal_has_restparam() const;
  public:
  void clear_restparam();
  const std::string& restparam() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_restparam(ArgT0&& arg0, ArgT... args);
  std::string* mutable_restparam();
  PROTOBUF_NODISCARD std::string* release_restparam();
  void set_allocated_restparam(std::string* restparam);
  private:
  const std::string& _internal_restparam() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_restparam(const std::string& value);
  std::string* _internal_mutable_restparam();
  public:

  // required .CC_Msg.CC_Msg.CC_MsgType callingType = 1;
  bool has_callingtype() const;
  private:
  bool _internal_has_callingtype() const;
  public:
  void clear_callingtype();
  ::CC_Msg::CC_Msg_CC_MsgType callingtype() const;
  void set_callingtype(::CC_Msg::CC_Msg_CC_MsgType value);
  private:
  ::CC_Msg::CC_Msg_CC_MsgType _internal_callingtype() const;
  void _internal_set_callingtype(::CC_Msg::CC_Msg_CC_MsgType value);
  public:

  // @@protoc_insertion_point(class_scope:CC_Msg.CC_Msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr restparam_;
    int callingtype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CC_Msg

// required .CC_Msg.CC_Msg.CC_MsgType callingType = 1;
inline bool CC_Msg::_internal_has_callingtype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CC_Msg::has_callingtype() const {
  return _internal_has_callingtype();
}
inline void CC_Msg::clear_callingtype() {
  _impl_.callingtype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::CC_Msg::CC_Msg_CC_MsgType CC_Msg::_internal_callingtype() const {
  return static_cast< ::CC_Msg::CC_Msg_CC_MsgType >(_impl_.callingtype_);
}
inline ::CC_Msg::CC_Msg_CC_MsgType CC_Msg::callingtype() const {
  // @@protoc_insertion_point(field_get:CC_Msg.CC_Msg.callingType)
  return _internal_callingtype();
}
inline void CC_Msg::_internal_set_callingtype(::CC_Msg::CC_Msg_CC_MsgType value) {
  assert(::CC_Msg::CC_Msg_CC_MsgType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.callingtype_ = value;
}
inline void CC_Msg::set_callingtype(::CC_Msg::CC_Msg_CC_MsgType value) {
  _internal_set_callingtype(value);
  // @@protoc_insertion_point(field_set:CC_Msg.CC_Msg.callingType)
}

// optional bytes restParam = 2;
inline bool CC_Msg::_internal_has_restparam() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CC_Msg::has_restparam() const {
  return _internal_has_restparam();
}
inline void CC_Msg::clear_restparam() {
  _impl_.restparam_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CC_Msg::restparam() const {
  // @@protoc_insertion_point(field_get:CC_Msg.CC_Msg.restParam)
  return _internal_restparam();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CC_Msg::set_restparam(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.restparam_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CC_Msg.CC_Msg.restParam)
}
inline std::string* CC_Msg::mutable_restparam() {
  std::string* _s = _internal_mutable_restparam();
  // @@protoc_insertion_point(field_mutable:CC_Msg.CC_Msg.restParam)
  return _s;
}
inline const std::string& CC_Msg::_internal_restparam() const {
  return _impl_.restparam_.Get();
}
inline void CC_Msg::_internal_set_restparam(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.restparam_.Set(value, GetArenaForAllocation());
}
inline std::string* CC_Msg::_internal_mutable_restparam() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.restparam_.Mutable(GetArenaForAllocation());
}
inline std::string* CC_Msg::release_restparam() {
  // @@protoc_insertion_point(field_release:CC_Msg.CC_Msg.restParam)
  if (!_internal_has_restparam()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.restparam_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.restparam_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CC_Msg::set_allocated_restparam(std::string* restparam) {
  if (restparam != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.restparam_.SetAllocated(restparam, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.restparam_.IsDefault()) {
    _impl_.restparam_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CC_Msg.CC_Msg.restParam)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace CC_Msg


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::CC_Msg::CC_Msg_CC_MsgType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::CC_Msg::CC_Msg_CC_MsgType>() {
  return ::CC_Msg::CC_Msg_CC_MsgType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_msg_2eproto_2epb_2eh
